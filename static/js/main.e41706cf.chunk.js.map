{"version":3,"sources":["components/Weather/Summary.jsx","components/Weather/Graph.jsx","components/Weather/IconBlock.jsx","components/Weather/Footer.jsx","components/Weather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Summary","props","undefined","city","react_default","a","createElement","className","name","country","currentDay","weather","time","weather_description","alt","src","weather_icon","temp","percipitation","humidity","wind","Graph","data","tempList","labelList","maxTemp","$","each","weatherDetails","idx","split","push","substr","labels","datasets","fill","backgroundColor","borderColor","pointBorderColor","getDataForChart","options","legend","display","scales","xAxes","gridLines","yAxes","ticks","suggestedMax","beginAtZero","drawBorder","es","height","onElementsClick","element","onGraphClick","IconBlock","classStr","day","weatherId","substring","isactive","onClick","onDayChange","max_temp","min_temp","Footer","isActiveSet","iconBlocks","index","details","iconBlock","Weather_IconBlock","key","API","Weather","state","handleGraphClick","length","_index","_this","setState","currentWeather","handleApiSubmit","val","api_key","escape","getGeoLocation","handleDayChange","newCurrentWeather","removeClass","addClass","navigator","geolocation","getCurrentPosition","getPosition","handleGeoError","alert","position","getWeatherForecast","coords","latitude","longitude","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","lat","lon","self","Object","assertThisInitialized","getJSON","concat","then","res","processResponse","response","cod","list","getDay","dt","hasOwnProperty","getTime","dt_txt","Math","round","main","temp_min","temp_max","speed","getIconName","icon","description","clouds","all","type","iconName","slice","timestamp","offset","Date","getTimezoneOffset","utcTime","hour","parseInt","newHour","period","this","href","rel","target","placeholder","Weather_Summary","Weather_Graph","Weather_Footer","Component","App","src_components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e41706cf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Summary = props => {\r\n  if (props.city === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"summary-block wsection\">\r\n      <div className=\"tdc-block\">\r\n        <p>\r\n          {props.city.name}, {props.city.country}\r\n        </p>\r\n        <p>\r\n          {props.currentDay}, {props.weather.time}\r\n        </p>\r\n        <p className=\"weather-description\">\r\n          {props.weather.weather_description}\r\n        </p>\r\n      </div>\r\n      <div className=\"temp-details-block\">\r\n        <div className=\"temp-block\">\r\n          <img\r\n            alt={props.weather.weather_description}\r\n            src={\"assets/images/\" + props.weather.weather_icon + \".png\"}\r\n          />\r\n          <p>{props.weather.temp}&deg; C</p>\r\n        </div>\r\n        <div className=\"details-block\">\r\n          <p>Percipitation: {props.weather.percipitation}%</p>\r\n          <p>Humidity: {props.weather.humidity}%</p>\r\n          <p>Wind: {props.weather.wind} km/h</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Graph = props => {\r\n  let currentDay = props.data.currentDay;\r\n  let tempList = [];\r\n  let labelList = [];\r\n  let maxTemp = 0;\r\n  $.each(props.data.weatherDetails[currentDay], function(idx, weather) {\r\n    let time = weather.time.split(\" \");\r\n    tempList.push(weather.temp);\r\n    labelList.push(time[0].substr(0, 2) + \" \" + time[1]);\r\n    maxTemp = weather.temp > maxTemp ? weather.temp : maxTemp;\r\n  });\r\n  let data = getDataForChart(tempList, labelList);\r\n  let options = getOptions(maxTemp);\r\n  return (\r\n    <div className=\"wsection\">\r\n      <Line\r\n        data={data}\r\n        height={75}\r\n        options={options}\r\n        onElementsClick={element => props.onGraphClick(element)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getDataForChart(tempList, labelList) {\r\n  return {\r\n    labels: labelList,\r\n    datasets: [\r\n      {\r\n        data: tempList,\r\n        fill: true,\r\n        backgroundColor: \"#f0f8ff\",\r\n        borderColor: \"#a4d4ff\",\r\n        pointBorderColor: \"#dd6200\"\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nfunction getOptions(temp) {\r\n  return {\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            display: false,\r\n            suggestedMax: temp + 10,\r\n            beginAtZero: true\r\n          },\r\n          gridLines: {\r\n            drawBorder: false,\r\n            display: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n}\r\n\r\nexport default Graph;\r\n","import React from \"react\";\r\n\r\nconst IconBlock = props => {\r\n  let classStr = \"\";\r\n  let day = props.weatherId.substring(0, 3);\r\n  if (props.isactive === \"true\") {\r\n    classStr = \" active\";\r\n  }\r\n  return (\r\n    <div\r\n      onClick={() => props.onDayChange(props.weatherId)}\r\n      className={\"icon-block icon-block-\" + props.weatherId + classStr}\r\n    >\r\n      <p>{day}</p>\r\n      <img\r\n        alt={props.weather.weather_description}\r\n        src={\"assets/images/\" + props.weather.weather_icon + \".png\"}\r\n      />\r\n      <div className=\"min-max-temp\">\r\n        <p>\r\n          {props.weather.max_temp}&deg; {props.weather.min_temp}&deg;\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconBlock;\r\n","import React from \"react\";\r\nimport $ from \"jquery\";\r\nimport IconBlock from \"./IconBlock\";\r\n\r\nconst Footer = props => {\r\n  let isActiveSet;\r\n  let iconBlocks = [];\r\n  $.each(props.data.weatherDetails, function(index, details) {\r\n    let iconBlock;\r\n    if (isActiveSet === undefined) {\r\n      isActiveSet = true;\r\n      iconBlock = (\r\n        <IconBlock\r\n          key={index}\r\n          weatherId={index}\r\n          onDayChange={props.onDayChange}\r\n          weather={details[0]}\r\n          isactive=\"true\"\r\n        />\r\n      );\r\n    } else {\r\n      iconBlock = (\r\n        <IconBlock\r\n          key={index}\r\n          onDayChange={props.onDayChange}\r\n          weatherId={index}\r\n          weather={details[0]}\r\n        />\r\n      );\r\n    }\r\n    iconBlocks.push(iconBlock);\r\n  });\r\n  return <div className=\"footer-weather-icon-block wsection\">{iconBlocks}</div>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./index.css\";\r\nimport Summary from \"./Summary\";\r\nimport Graph from \"./Graph\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst API = \"https://api.openweathermap.org/\";\r\n\r\nclass Weather extends Component {\r\n  state = {};\r\n  render() {\r\n    if (this.state.api_key === undefined || this.state.api_key === \"\") {\r\n      return (\r\n        <div className=\"api-key-block\">\r\n          <h2>Weather Forecast</h2>\r\n          <p>\r\n            This app uses the{\" \"}\r\n            <a\r\n              href=\"https://openweathermap.org\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              OpenWeatherMap\r\n            </a>{\" \"}\r\n            API to show 5 day/ 3 hour weather forecast.\r\n          </p>\r\n          <input\r\n            className=\"api-key-input\"\r\n            type=\"text\"\r\n            placeholder=\"Enter your API Key here\"\r\n          />\r\n          <input type=\"submit\" onClick={this.handleApiSubmit} />\r\n        </div>\r\n      );\r\n    }\r\n    if (this.state.city === undefined) {\r\n      return (\r\n        <div className=\"loader-block\">\r\n          <div className=\"loader\" />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Summary\r\n          city={this.state.city}\r\n          weather={this.state.currentWeather}\r\n          currentDay={this.state.currentDay}\r\n        />\r\n        <Graph data={this.state} onGraphClick={this.handleGraphClick} />\r\n        <Footer data={this.state} onDayChange={this.handleDayChange} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.state.api_key !== undefined && this.getGeoLocation();\r\n  }\r\n\r\n  handleGraphClick = element => {\r\n    if (element.length > 0) {\r\n      let index = element[0]._index;\r\n      this.setState({\r\n        currentWeather: this.state.weatherDetails[this.state.currentDay][index]\r\n      });\r\n    }\r\n  };\r\n\r\n  handleApiSubmit = () => {\r\n    if ($(\".api-key-input\").val() !== \"\") {\r\n      this.setState({\r\n        api_key: escape($(\".api-key-input\").val())\r\n      });\r\n      this.getGeoLocation();\r\n    }\r\n  };\r\n\r\n  handleDayChange = index => {\r\n    let newCurrentWeather = this.state.weatherDetails[index][0];\r\n    $(\".icon-block\").removeClass(\"active\");\r\n    $(\".icon-block-\" + index).addClass(\"active\");\r\n    this.setState({\r\n      currentWeather: newCurrentWeather,\r\n      currentDay: index\r\n    });\r\n  };\r\n\r\n  getGeoLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        this.getPosition,\r\n        this.handleGeoError\r\n      );\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  };\r\n\r\n  getPosition = position => {\r\n    this.getWeatherForecast(\r\n      position.coords.latitude,\r\n      position.coords.longitude\r\n    );\r\n  };\r\n\r\n  handleGeoError = error => {\r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        alert(\"User denied the request for Geolocation.\");\r\n        break;\r\n      case error.POSITION_UNAVAILABLE:\r\n        alert(\"Location information is unavailable.\");\r\n        break;\r\n      case error.TIMEOUT:\r\n        alert(\"The request to get user location timed out.\");\r\n        break;\r\n      default:\r\n        alert(\"An unknown error occurred.\");\r\n        break;\r\n    }\r\n  };\r\n\r\n  getWeatherForecast = (lat, lon) => {\r\n    let self = this;\r\n    $.getJSON(\r\n      `${API}data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${\r\n        this.state.api_key\r\n      }`\r\n    ).then(res => self.processResponse(res));\r\n  };\r\n\r\n  processResponse = response => {\r\n    if (response.cod === \"200\") {\r\n      let self = this;\r\n      let city = { name: response.city.name, country: response.city.country };\r\n      let weatherDetails = {};\r\n      let currentDay;\r\n      $.each(response.list, function(index, weather) {\r\n        let day = self.getDay(weather.dt);\r\n        if (currentDay === undefined) {\r\n          currentDay = day;\r\n        }\r\n        if (!weatherDetails.hasOwnProperty(day)) {\r\n          weatherDetails[day] = [];\r\n        }\r\n        let details = {\r\n          time: self.getTime(weather.dt_txt),\r\n          min_temp: Math.round(weather.main.temp_min - 273.15),\r\n          max_temp: Math.round(weather.main.temp_max - 273.15),\r\n          temp: Math.round(weather.main.temp - 273.15),\r\n          humidity: weather.main.humidity,\r\n          wind: Math.round(weather.wind.speed * 3.6),\r\n          weather_icon: self.getIconName(weather.weather[0].icon),\r\n          weather_description: weather.weather[0].description,\r\n          percipitation: weather.clouds.all\r\n        };\r\n        weatherDetails[day].push(details);\r\n      });\r\n      this.setState({\r\n        city,\r\n        weatherDetails,\r\n        currentWeather: weatherDetails[currentDay][0],\r\n        currentDay: currentDay\r\n      });\r\n    }\r\n  };\r\n\r\n  getIconName = type => {\r\n    let iconName = \"\";\r\n    switch (type.substr(0, 2)) {\r\n      case \"01\":\r\n        iconName = \"sunny\";\r\n        break;\r\n      case \"02\":\r\n        iconName = \"partly-sunny\";\r\n        break;\r\n      case \"09\":\r\n      case \"10\":\r\n        iconName = \"rain\";\r\n        break;\r\n      case \"11\":\r\n        iconName = \"thunderstorm\";\r\n        break;\r\n      case \"13\":\r\n        iconName = \"snow\";\r\n        break;\r\n      case \"50\":\r\n        iconName = \"mist\";\r\n        break;\r\n      default:\r\n        iconName = \"cloud\";\r\n        break;\r\n    }\r\n    if (type.slice(-1) === \"n\") {\r\n      if (iconName === \"sunny\") {\r\n        iconName = \"night\";\r\n      }\r\n      if (iconName === \"partly-sunny\") {\r\n        iconName = \"night-cloud\";\r\n      }\r\n    }\r\n    return iconName;\r\n  };\r\n\r\n  getDay = timestamp => {\r\n    let offset = new Date().getTimezoneOffset();\r\n    timestamp += offset * 60;\r\n    let currentDate = new Date(timestamp * 1000);\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    return days[currentDate.getDay()];\r\n  };\r\n\r\n  getTime = utcTime => {\r\n    // let offset = new Date().getTimezoneOffset();\r\n    // timestamp += offset * 60;\r\n    // let date = new Date(timestamp * 1000);\r\n    // return date.toISOString().match(/(\\d{2}:\\d{2})/)[0];\r\n    let time = utcTime.split(\" \")[1].substr(0, 5);\r\n    let hour = parseInt(time.substr(0, 2));\r\n    let newHour = hour > 12 ? hour - 12 : hour;\r\n    let period = parseInt(time.substr(0, 2)) >= 12 ? \"pm\" : \"am\";\r\n    if (newHour < 10) {\r\n      return \"0\" + newHour + time.substr(2) + \" \" + period + \" UTC\";\r\n    }\r\n    return newHour + time.substr(2) + \" \" + period + \" UTC\";\r\n  };\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport Weather from \"./components/Weather/index\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return <Weather />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}