{"version":3,"sources":["components/Weather/Summary.jsx","components/Weather/IconBlock.jsx","components/Weather/Footer.jsx","components/Weather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Summary","props","undefined","city","react_default","a","createElement","className","name","country","weather","day","time","weather_description","alt","src","temp","percipitation","humidity","wind","IconBlock","classStr","substring","isactive","onClick","onDayChange","weatherId","max_temp","min_temp","Footer","addedDays","iconBlocks","data","weatherDetails","map","details","indexOf","detailsId","push","length","Weather_IconBlock","key","console","log","API","Weather","state","handleApiSubmit","_this","setState","api_key","escape","$","val","getGeoLocation","handleDayChange","index","newCurrentWeather","removeClass","addClass","currentWeather","navigator","geolocation","getCurrentPosition","getPosition","handleGeoError","alert","position","getWeatherForecast","coords","latitude","longitude","error","code","lat","lon","self","Object","assertThisInitialized","getJSON","concat","then","res","processResponse","response","list","getDay","dt","getTime","dt_txt","Math","round","main","temp_min","temp_max","speed","weather_condition","description","clouds","all","timestamp","offset","Date","getTimezoneOffset","utcTime","split","substr","period","parseInt","this","type","placeholder","Weather_Summary","Weather_Footer","Component","App","src_components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c7ea2dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Summary = props => {\r\n  if (props.city === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"summary-block\">\r\n      <div className=\"tdc-block\">\r\n        <p>\r\n          {props.city.name}, {props.city.country}\r\n        </p>\r\n        <p>\r\n          {props.weather.day}, {props.weather.time}\r\n        </p>\r\n        <p className=\"weather-description\">\r\n          {props.weather.weather_description}\r\n        </p>\r\n      </div>\r\n      <div className=\"temp-details-block\">\r\n        <div className=\"temp-block\">\r\n          <img alt=\"Fog\" src=\"assets/images/fog.png\" />\r\n          <p>{props.weather.temp}&deg; C</p>\r\n        </div>\r\n        <div className=\"details-block\">\r\n          <p>Percipitation: {props.weather.percipitation}%</p>\r\n          <p>Humidity: {props.weather.humidity}%</p>\r\n          <p>Wind: {props.weather.wind} km/h</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import React from \"react\";\r\n\r\nconst IconBlock = props => {\r\n  let classStr = \"\";\r\n  let day = props.weather.day.substring(0, 3);\r\n  if (props.isactive === \"true\") {\r\n    classStr = \" active\";\r\n  }\r\n  return (\r\n    <div\r\n      onClick={() => props.onDayChange(props.weatherId)}\r\n      className={\"icon-block icon-block-\" + props.weatherId + classStr}\r\n    >\r\n      <p>{day}</p>\r\n      <img alt=\"Sunny\" src=\"assets/images/sunny.png\" />\r\n      <div className=\"min-max-temp\">\r\n        <p>\r\n          {props.weather.max_temp}&deg; {props.weather.min_temp}&deg;\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconBlock;\r\n","import React from \"react\";\r\nimport IconBlock from \"./IconBlock\";\r\n\r\nconst Footer = props => {\r\n  let addedDays = [];\r\n  let iconBlocks = props.data.weatherDetails.map(function(details) {\r\n    if (addedDays.indexOf(details.day) === -1) {\r\n      let detailsId = props.data.weatherDetails.indexOf(details);\r\n      addedDays.push(details.day);\r\n      if (addedDays.length === 1) {\r\n        return (\r\n          <IconBlock\r\n            key={detailsId}\r\n            weatherId={detailsId}\r\n            onDayChange={props.onDayChange}\r\n            weather={details}\r\n            isactive=\"true\"\r\n          />\r\n        );\r\n      }\r\n      return (\r\n        <IconBlock\r\n          key={detailsId}\r\n          onDayChange={props.onDayChange}\r\n          weatherId={detailsId}\r\n          weather={details}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  console.log(iconBlocks);\r\n  return <div className=\"footer-weather-icon-block\">{iconBlocks}</div>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./index.css\";\r\nimport Summary from \"./Summary\";\r\n// import Graph from \"./Graph\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst API = \"http://api.openweathermap.org/\";\r\n\r\nclass Weather extends Component {\r\n  state = {};\r\n  render() {\r\n    if (this.state.api_key === undefined || this.state.api_key === \"\") {\r\n      return (\r\n        <div className=\"api-key-block\">\r\n          <input\r\n            className=\"api-key-input\"\r\n            type=\"text\"\r\n            placeholder=\"Enter your API KEY here\"\r\n          />\r\n          <input type=\"submit\" onClick={this.handleApiSubmit} />\r\n        </div>\r\n      );\r\n    }\r\n    if (this.state.city === undefined) {\r\n      return (\r\n        <div className=\"loader-block\">\r\n          <div className=\"loader\" />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Summary city={this.state.city} weather={this.state.currentWeather} />\r\n        <Footer data={this.state} onDayChange={this.handleDayChange} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleApiSubmit = () => {\r\n    this.setState({\r\n      api_key: escape($(\".api-key-input\").val())\r\n    });\r\n    this.getGeoLocation();\r\n  };\r\n\r\n  handleDayChange = index => {\r\n    let newCurrentWeather = this.state.weatherDetails[index];\r\n    $(\".icon-block\").removeClass(\"active\");\r\n    $(\".icon-block-\" + index).addClass(\"active\");\r\n    this.setState({\r\n      currentWeather: newCurrentWeather\r\n    });\r\n  };\r\n\r\n  getGeoLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        this.getPosition,\r\n        this.handleGeoError\r\n      );\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  };\r\n\r\n  getPosition = position => {\r\n    this.getWeatherForecast(\r\n      position.coords.latitude,\r\n      position.coords.longitude\r\n    );\r\n  };\r\n\r\n  handleGeoError = error => {\r\n    alert(\"ERROR \", error.code);\r\n  };\r\n\r\n  getWeatherForecast = (lat, lon) => {\r\n    let self = this;\r\n    $.getJSON(\r\n      `${API}data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${\r\n        this.state.api_key\r\n      }`\r\n    ).then(res => self.processResponse(res));\r\n  };\r\n\r\n  processResponse = response => {\r\n    console.log(response);\r\n    let self = this;\r\n    let city = { name: response.city.name, country: response.city.country };\r\n    let weatherDetails = response.list.map(function(weather) {\r\n      var details = {\r\n        day: self.getDay(weather.dt),\r\n        time: self.getTime(weather.dt_txt),\r\n        min_temp: Math.round(weather.main.temp_min - 273.15),\r\n        max_temp: Math.round(weather.main.temp_max - 273.15),\r\n        temp: Math.round(weather.main.temp - 273.15),\r\n        humidity: weather.main.humidity,\r\n        wind: Math.round(weather.wind.speed * 3.6),\r\n        weather_condition: weather.weather[0].main,\r\n        weather_description: weather.weather[0].description,\r\n        percipitation: weather.clouds.all\r\n      };\r\n      return details;\r\n    });\r\n    this.setState({\r\n      city,\r\n      weatherDetails,\r\n      currentWeather: weatherDetails[0]\r\n    });\r\n  };\r\n\r\n  getDay = timestamp => {\r\n    let offset = new Date().getTimezoneOffset();\r\n    timestamp += offset * 60;\r\n    let currentDate = new Date(timestamp * 1000);\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    return days[currentDate.getDay()];\r\n  };\r\n\r\n  getTime = utcTime => {\r\n    // let offset = new Date().getTimezoneOffset();\r\n    // timestamp += offset * 60;\r\n    // let date = new Date(timestamp * 1000);\r\n    // return date.toISOString().match(/(\\d{2}:\\d{2})/)[0];\r\n    let time = utcTime.split(\" \")[1].substr(0, 5);\r\n    let period = parseInt(time.substr(0, 2)) >= 12 ? \"pm\" : \"am\";\r\n    return time + \" \" + period + \" UTC\";\r\n  };\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport Weather from \"./components/Weather/index\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return <Weather />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}